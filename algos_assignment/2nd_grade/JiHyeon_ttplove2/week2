#include <iostream>
#define endl "\n"
using namespace std;
int dx[] = { 1,-1,0,0 };	//동,서,남,북 이동 방향에 따른 x좌표의 변화
int dy[] = { 0,0,1,-1 };	//동,서,남,북 이동 방향에 따른 y좌표의 변화
double prob[4];		//각각 방향으로 갈 확률
int visited[30][30];	//방문한 좌표
int N;
double ans = 0.0;	//이동경로가 단순할 확률 변수
void dfs(int x, int y, int cnt, double res);

int main()
{
	cin >> N; //N값 입력받기
	//동, 서, 남, 북으로 갈 확률을 각각 입력받고 그 값을 %단위로 변환하여 저장함.
	for (int i = 0; i < 4; i++) {
		float p;
		cin >> p;
		prob[i] = p / 100.0;
	}
	dfs(14, 14, 0, 1.0);
	cout.precision(10);	//소수점 고정하는 방법 (블로그 글 참고하였습니다)
	cout << fixed << ans << endl;
	return 0;
}

void dfs(int x, int y, int cnt, double res)
{
	//N번 이동을 한 경우에는 바로 ans에 res값을 더하고 함수를 끝냄
	if (cnt == N) {
		ans += res;
		return;
	}
	visited[x][y] = true;	// 매개변수로 주어진 x, y좌표 위치의 값을 true로 저장하여 방문하였음을 나타냄.

	int nextx, nexty;	//다음에 방문할 x, y 좌표 값 변수
	for (int i = 0; i < 4; i++) {
		nextx = x + dx[i];	
		nexty = y + dy[i];
		if (!visited[nextx][nexty]) {	//저장된 값이 false인 경우(아직 방문하지 않은 경우)
			visited[nextx][nexty] = true;	
			dfs(nextx, nexty, cnt + 1, res * prob[i]);
			visited[nextx][nexty] = false;
		}
	}
}
